# TCP Chat Client__author__ = "Sam Scott"__email__ = "samueltscott@gmail.com"# Created on 16-03-2016import socket, threading, randomfrom tkinter import *class App(Frame):    version = 0.6     def __init__(self, master):        super(App, self).__init__(master)        with open("servers.txt", "r") as f:            servers = f.readlines()        if len(servers) >= 1:            print("Servers you have connected to")            printed_ip = []            for ip in servers:                if ip not in printed_ip:                    print(ip)                    printed_ip.append(ip)        self.server = input("\nEnter an IP address: ").strip()        self.name = input("Enter your name: ").strip()        if not self.name:            self.name = "Anonymous" + str(random.randrange(1, 10000))        self.port = 45009        self.grid()        self.data_buff = 4096        if not self.connect():            #print("Unable to connect to", self.server, "on port", str(self.port), "\nClosing program...")            quit()        s.send("/nick {}".format(self.name).encode())        self.create_widgets()        t1 = threading.Thread(target = self.get_messages)        t1.start()    def __str__(self):        rep = "Chat Instance\nServer: " + self.server + "\nPort: " + str(self.port) + "\nVersion: " + str(self.version)        return rep    def create_widgets(self):        self.nick_lbl = Label(self, text = "Nickname: " + self.name, bg = "black", fg = "white")        self.nick_lbl.grid(row = 0, column = 1, sticky = N)        self.message_lbl = Label(self, text = "Message: ", bg = "black", fg = "white")        self.message_lbl.grid(row = 1, column = 0, sticky = E)        self.message_output = Text(self, width = 100, height = 40, wrap = WORD)        self.message_output.grid(row = 0, column = 0, sticky = W)        self.message_input = Entry(self)        self.message_input.grid(row = 1, column = 1, sticky = W)        self.submit_bttn = Button(self, text = "Send", command = self.submit_message, bg = "darkgreen", fg = "white")        self.submit_bttn.grid(row = 1, column = 2, sticky = W)        self.message_output.config(state=DISABLED)        root.bind('<Return>', self.enter)    def enter(self, event):        self.submit_message()    def submit_message(self):        message = self.message_input.get().strip()        if not message:            self.message_input.delete(0, END)            return        #message = self.name + "> " + message        data = message.encode()        s.send(data)        self.message_input.delete(0, END)    def insert_message(self, message):        log = self.message_output.get("1.0", END)        log = log + message        self.message_output.config(state=NORMAL)        self.message_output.delete("1.0", END)        self.message_output.insert("1.0", log)        self.message_output.config(state=DISABLED)    def get_messages(self):        while True:            data = s.recv(self.data_buff)            if not data:                break            decoded = data.decode("utf-8")            self.insert_message(decoded)        s.close()        self.insert_message("Connection Lost.")    def connect(self):        print("Attempting to connect to", self.server, "on port", self.port)        try:            s.connect((self.server, self.port))            print("Connection established.")            return True        except Exception as e:            print(e)            return False                try:    with open("servers.txt", "r") as r:        r.read()except IOError:    with open("servers.txt", "w") as f:        passs = socket.socket(socket.AF_INET, socket.SOCK_STREAM)root = Tk()app = App(root)app.configure(background = "black")root.configure(background = "black")root.title("Messenger V{}".format(str(App.version)))root.geometry("1280x720")root.mainloop()